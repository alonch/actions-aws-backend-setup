name: 'Actions AWS backend setup'
description: 'Search or Create Terraform backend resources on AWS'
inputs:
  instance: 
    description: 'Unique identifier for infrastructure'
    required: true
    default: 'tf-backend'
outputs:
  s3:
    description: "Backend S3 name"
    value: ${{ steps.s3.outputs.name || format("actions-aws-backend-setup-{0}", inputs.instance) }}  
  dynamodb:
    description: "Backend dynamodb Table"
    value: ${{ steps.dynamodb.outputs.name format("actions-aws-backend-setup-{0}", inputs.instance) }}  
runs:
  using: "composite"
  steps:
    - name: query dynamodb
      shell: bash
      id: dynamodb
      env: 
        SERVICE: dynamodb
        ARN_SEPARATOR: /
        TAG_NAME: ${{ inputs.instance }}
      run: | 
        arn=$(aws resourcegroupstaggingapi get-resources \
          --tag-filters Key=$TAG_NAME,Values=true \
          --resource-type-filters $SERVICE \
          --query "ResourceTagMappingList[].ResourceARN" \
          --output text)
        name=$(echo "$arn" | awk -F $ARN_SEPARATOR '{print $2}')
        echo "name=$name" >> $GITHUB_OUTPUT
    - name: query s3
      shell: bash
      id: s3
      env: 
        SERVICE: s3
        ARN_SEPARATOR: ':::'
        TAG_NAME: ${{ inputs.instance }}
      run: | 
        arn=$(aws resourcegroupstaggingapi get-resources \
          --tag-filters Key=$TAG_NAME,Values=true \
          --resource-type-filters $SERVICE \
          --query "ResourceTagMappingList[].ResourceARN" \
          --output text)
        name=$(echo "$arn" | awk -F $ARN_SEPARATOR '{print $2}')
        echo "name=$name" >> $GITHUB_OUTPUT
    - uses: hashicorp/setup-terraform@v3
      if: ${{ !steps.s3.outputs.name }}
    - name: terraform init
      shell: bash
      if: ${{ !steps.s3.outputs.name }}
      run: terraform init
    - name: terraform apply
      shell: bash
      if: ${{ !steps.s3.outputs.name }}
      env: 
        TF_VAR_instance: ${{ inputs.instance }}
      run: terraform apply -auto-approve
      